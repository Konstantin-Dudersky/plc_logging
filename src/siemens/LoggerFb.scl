FUNCTION_BLOCK "LoggerFb"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      global_logger_level { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 0;   // Filter all logging messages
      ip_1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 10;
      ip_2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 101;
      ip_3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 50;
      ip_4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 17;
      port_number { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt := 4567;
      interface_id { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt := 64;
      id { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : CONN_OUC := 1;
   END_VAR

   VAR_OUTPUT 
      buffer_size { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
   END_VAR

   VAR 
      prev { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         state { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      END_STRUCT;
      diag { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         tcon_done_counter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         tcon_error_counter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         tcon_error_status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
         timeout_counter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         tsend_done_counter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         tsend_error_counter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         tsend_error_status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      END_STRUCT;
      connect {InstructionName := 'TCON_IP_v4'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : TCON_IP_v4;
      data { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      buffer { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..9] of String;
      state { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      timeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      init { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'True'} : Bool := TRUE;   // TRUE = initialize function block
      config_in_block { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         level { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;
         block_title { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      END_STRUCT;
      tcon {InstructionName := 'TCON'; LibVersion := '4.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TCON;
      tsend {InstructionName := 'TSEND'; LibVersion := '4.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : TSEND;
      tdiscon {InstructionName := 'TDISCON'; LibVersion := '2.1'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : TDISCON;
      connect_id { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : CONN_OUC := 16#1;
   END_VAR

   VAR_TEMP 
      i : Int;
      com_rst : Bool;
   END_VAR

   VAR CONSTANT 
      "BUFFER_SIZE_" : Int := 9;
      ST_STOP : Int;
      ST_CONNECT : Int := 1;
      ST_WAIT : Int := 2;
      ST_SEND : Int := 3;
      ST_DISCON : Int := 4;
   END_VAR


BEGIN
	(*Блок логгера.*)
	
	// -----------------------------------------------------------------------------
	
	IF #init THEN
	    // first execution
	    #connect.RemoteAddress.ADDR[1] := #ip_1;
	    #connect.RemoteAddress.ADDR[2] := #ip_2;
	    #connect.RemoteAddress.ADDR[3] := #ip_3;
	    #connect.RemoteAddress.ADDR[4] := #ip_4;
	    #connect.RemotePort := #port_number;
	    #connect.LocalPort := #port_number;
	    #connect.ActiveEstablished := true;
	    #connect.InterfaceId := #interface_id;
	    //#connect.ID := #id;
	    #state := #ST_STOP;
	    #connect.ConnectionType := 11;
	    
	    #buffer_size := #"BUFFER_SIZE_";
	END_IF;
	
	CASE #state OF
	    #ST_STOP:
	        IF #global_logger_level < "LoggerLevels".DISABLE THEN
	            #state := #ST_CONNECT;
	            FOR #i := 0 TO #"BUFFER_SIZE_" DO
	                #buffer[#i] := '';
	            END_FOR;
	        END_IF;
	        
	    #ST_CONNECT:
	        IF #global_logger_level = "LoggerLevels".DISABLE OR #init THEN
	            #state := #ST_STOP;
	        ELSIF #tcon.DONE THEN
	            // done
	            #diag.tcon_done_counter += 1;
	            #state := #ST_WAIT;
	        ELSIF #tcon.ERROR THEN
	            // error
	            #diag.tcon_error_counter += 1;
	            #diag.tcon_error_status := #tcon.STATUS;
	            #state := #ST_STOP;
	            IF #tcon.STATUS = 16#80A3 THEN
	                #connect_id += 1;
	            END_IF;
	        ELSIF #timeout.Q THEN
	            // timeout
	            #diag.timeout_counter += 1;
	            #state := #ST_STOP;
	        END_IF;
	        
	    #ST_WAIT:
	        IF #global_logger_level = "LoggerLevels".DISABLE OR #init THEN
	            #state := #ST_DISCON;
	        END_IF;
	        
	        IF #buffer[0] <> '' THEN
	            #data := #buffer[0];
	            FOR #i := 0 TO #"BUFFER_SIZE_" - 1 DO
	                #buffer[#i] := #buffer[#i + 1];
	            END_FOR;
	            #buffer[#"BUFFER_SIZE_"] := '';
	            #state := #ST_SEND;
	        END_IF;
	        
	    #ST_SEND:
	        IF #global_logger_level = "LoggerLevels".DISABLE OR #init THEN
	            #state := #ST_DISCON;
	        ELSIF #tsend.DONE THEN
	            // done
	            #diag.tsend_done_counter += 1;
	            #state := #ST_WAIT;
	        ELSIF #tsend.ERROR THEN
	            // error
	            #diag.tsend_error_counter += 1;
	            #diag.tsend_error_status := #tsend.STATUS;
	            #state := #ST_DISCON;
	        ELSIF #timeout.Q THEN
	            // timeout
	            #diag.timeout_counter += 1;
	            #state := #ST_DISCON;
	        END_IF;
	        
	    #ST_DISCON:
	        IF #tdiscon.DONE OR #tdiscon.ERROR OR #timeout.Q THEN
	            #state := #ST_STOP;
	        END_IF;
	        
	END_CASE;
	
	#timeout(IN := #state = #prev.state,
	         PT := T#5s);
	
	#connect.ID := #connect_id;
	#tcon(REQ := #state = #ST_CONNECT,
	      ID := #connect_id,
	      CONNECT := #connect);
	
	#tsend(REQ := #state = #ST_SEND,
	       ID :=#connect_id,
	       LEN := INT_TO_UDINT(LEN(#data)) + 2, // why 2 ???
	       DATA := #data);
	
	#tdiscon(REQ := #state = #ST_DISCON,
	         ID := #connect_id);
	
	#init := false;
	#prev.state := #state;
END_FUNCTION_BLOCK

